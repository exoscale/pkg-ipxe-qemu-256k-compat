#!/bin/bash
#
# Generate a isolinux/bios and efi ISO boot image

set -e
PATH=/usr/bin:/bin:/usr/sbin:/sbin

dir="./debian/ipxe-qemu-256k-compat-efi-roms/usr/lib/ipxe/qemu/"
rc=0

declare -A roms
# these are the current known power-of-2 buckets of the roms generated by ipxe
# If any of these roms grows out of the size bucket it was in then a KVM
# live migration between two systems with those different sizes will fail.
# This check is intended to break builds on such a change to make it an opt-in
# change by a developer (to change the sizes below) AFTER he has taken care that
# the qemu/libvirt on the migration paths will take care of transforming that
# on the migration.
# Due to ipxe (currently) not being part of Ubunut Cloud Archive all UCA have
# the ipxe of the latest LTS. Which makes a certain qemu version (which defines
# the machine type) ambiguous which ipxe roms it has.
# Therefore such size breaking upgrades are only ok with a lot of extra effort
# to take care or on LTS releases where qemu can assume all former LTS based
# types are of the former size and transforms to the new one.
roms["compat-256k-efi-e1000.rom"]="262144"
roms["compat-256k-efi-ne2k_pci.rom"]="262144"
roms["compat-256k-efi-pcnet.rom"]="262144"
roms["compat-256k-efi-rtl8139.rom"]="262144"
roms["compat-256k-efi-virtio.rom"]="262144"

echo "Generated roms:"
ls -laF "${dir}"

for rom in "${!roms[@]}"; do
    size=$(stat --printf="%s" "${dir}/${rom}")
    shiftsize="${size}"
    bucket=1
    while [ "${shiftsize}" -ne "1" ]; do
        shiftsize=$((shiftsize>>1))
        bucket=$((bucket<<1))
    done
    bucket=$((bucket<<1))
    # being smaller could be ok, but check -eq to warn/break on unexpected size loss as well
    if [ "${bucket}" -eq "${roms[$rom]}" ]; then
        echo "OK: ${rom} is ${size} bytes and thereby in bucket ${bucket} which matches ${roms[$rom]}"
    else
        echo "ERROR: ${rom} is ${size} bytes and thereby in bucket ${bucket} which does not match ${roms[$rom]}"
        rc=1
    fi
done

exit ${rc}
